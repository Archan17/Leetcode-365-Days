Link : https://leetcode.com/problems/count-nodes-equal-to-average-of-subtree/?envType=daily-question&envId=2023-11-02

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
std::pair<int, int> dfs(TreeNode* node, int& count) {
        if (!node) {
            return {0, 0};
        }

        // Recursively calculate the sum and count of the subtree values
        auto left = dfs(node->left, count);
        auto right = dfs(node->right, count);

        // Calculate the sum and count of the current subtree
        int sum = left.first + right.first + node->val;
        int numNodes = left.second + right.second + 1;

        // Calculating the average
        int average = sum / numNodes;

        // Check if the current node value is equal to the subtree average
        if (node->val == average) {
            count++;
        }

        // Return the sum and count for the parent node's subtree calculation
        return {sum, numNodes};
}
public:
    int averageOfSubtree(TreeNode* root) {
        int count = 0;
        dfs(root, count);
        return count;
    }
};
