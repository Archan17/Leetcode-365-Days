Link to watch video : https://www.youtube.com/watch?v=RF_M9tX4Eag
Link to problem : https://leetcode.com/problems/reverse-linked-list-ii/description/

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reverseBetween(self, head: Optional[ListNode], left: int, right: int) -> Optional[ListNode]:
        dummy = ListNode(0,head)
        
        # 1) Reach node at position left
        leftPrev,cur = dummy,head
        for i in range(left-1):
            leftPrev,cur = cur,cur.next

        # 2) Now cur = "left" leftPrev = " Node before left " prev = Null``
        # Do simple Reverse the list from left to right
        prev = None
        for i in range(right-left+1):
            next_node = cur.next #save the broken node in variable
            cur.next = prev
            prev,cur = cur,next_node

        # 3) Update the pointers
        leftPrev.next.next = cur # cur is node after right
        leftPrev.next = prev # prev is "right"
        return dummy.next

